pipeline {
    agent any

    environment {
        IMAGE_NAME = "gigamind/flask-api"
    }

     stages {
        stage('Upload docker-compose.yml and .env') {
            steps {
                sshagent (credentials: ['prod-server-ssh']) {
                    withCredentials([file(credentialsId: 'prod-env-file', variable: 'ENV_FILE')]) {
                        sh '''
                        # Copy docker-compose.yml
                        scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@37.9.53.127:/opt/flask-api/docker-compose.yml

                        # Copy .env
                        scp -o StrictHostKeyChecking=no $ENV_FILE ubuntu@37.9.53.127:/opt/flask-api/.env
                        '''
                    }
                }
            }
        }

        stage('Deploy to Production Server') {
            steps {
                sshagent (credentials: ['prod-server-ssh']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@37.9.53.127 '
                    cd /opt/flask-api &&
                    docker compose pull &&
                    docker compose up -d'
                    docker exec flask-api-db-1 psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'flaskdb'\" | grep -q 1 || docker exec flask-api-db-1 psql -U postgres -c \"CREATE DATABASE flaskdb\"
                    '''
                }
            }
        }
    }
}

